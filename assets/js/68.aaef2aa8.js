(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{452:function(t,s,a){"use strict";a.r(s);var e=a(28),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2021年05月07日"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2021年05月07日"}},[t._v("#")]),t._v(" 2021年05月07日")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("天气")]),t._v(" "),a("p",[t._v("今日杭州晴，天气温和。")])]),t._v(" "),a("h2",{attrs:{id:"线程、进程、eventloop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程、进程、eventloop"}},[t._v("#")]),t._v(" 线程、进程、EventLoop")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#线程、进程、eventloop"}},[t._v("线程、进程、EventLoop")]),a("ul",[a("li",[a("a",{attrs:{href:"#线程与进程"}},[t._v("线程与进程")])]),a("li",[a("a",{attrs:{href:"#多进程与多线程"}},[t._v("多进程与多线程")])]),a("li",[a("a",{attrs:{href:"#浏览器内核"}},[t._v("浏览器内核")])]),a("li",[a("a",{attrs:{href:"#浏览器中的-event-loop"}},[t._v("浏览器中的 Event Loop")])])])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"线程与进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程"}},[t._v("#")]),t._v(" 线程与进程")]),t._v(" "),a("p",[t._v("我们经常说 "),a("code",[t._v("JS")]),t._v(" 是单线程执行的，指的是一个进程里只有一个主线程。那到底什么是线程？什么是进程？")]),t._v(" "),a("p",[t._v("官方的说法是：进程是 "),a("code",[t._v("CPU")]),t._v(" 资源分配的最小单位；线程是 "),a("code",[t._v("CPU")]),t._v(" 调度的最小单位。")]),t._v(" "),a("ul",[a("li",[t._v("进程好比工厂，有单独专属于自己的工厂资源。")]),t._v(" "),a("li",[t._v("线程好比工人，多个工人在一个工厂协作。一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。")]),t._v(" "),a("li",[t._v("工人们共享工厂的空间。进程的内存空间是共享的，每个线程都可以用这些共享内存。")]),t._v(" "),a("li",[t._v("多个工厂之间是独立存在的。")])]),t._v(" "),a("h3",{attrs:{id:"多进程与多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程与多线程"}},[t._v("#")]),t._v(" 多进程与多线程")]),t._v(" "),a("h4",{attrs:{id:"多进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程"}},[t._v("#")]),t._v(" 多进程")]),t._v(" "),a("p",[t._v("在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的。比如你可以听歌词的同时打开编辑器敲代码，编辑器和听歌软件的进程之间丝毫不会相互干扰。")]),t._v(" "),a("h4",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),a("p",[t._v("程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务。允许单个程序创建多个并行执行的线程来完成各自的任务。 以 "),a("code",[t._v("chrome")]),t._v(" 为例，当你打开一个 "),a("code",[t._v("tab")]),t._v(" 页面时，其实就是创建了一个进程，一个进程中可以有多个线程，比如渲染线程，"),a("code",[t._v("js")]),t._v(" 引擎线程，"),a("code",[t._v("HTTP")]),t._v(" 请求线程等等。当你发起一个请求时，其实就是创建了一个线程，当请求结束后，该线程可能就会被销毁。")]),t._v(" "),a("h3",{attrs:{id:"浏览器内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[t._v("#")]),t._v(" 浏览器内核")]),t._v(" "),a("p",[t._v("浏览器内核是多线程，在内核控制下各线程相互配合保持同步，一个浏览器通常由以下常驻线程组成：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("GUI")]),t._v(" 渲染线程")]),t._v(" "),a("li",[a("code",[t._v("JavaScript")]),t._v(" 引擎线程")]),t._v(" "),a("li",[t._v("定时触发器线程")]),t._v(" "),a("li",[t._v("事件触发线程")]),t._v(" "),a("li",[t._v("异步 "),a("code",[t._v("http")]),t._v(" 请求线程")])]),t._v(" "),a("h4",{attrs:{id:"gui-渲染线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui-渲染线程"}},[t._v("#")]),t._v(" GUI 渲染线程")]),t._v(" "),a("ul",[a("li",[t._v("主要负责页面的渲染，解析 "),a("code",[t._v("HTML")]),t._v("、"),a("code",[t._v("CSS")]),t._v("，构建 "),a("code",[t._v("DOM")]),t._v(" 树，布局和绘制等。")]),t._v(" "),a("li",[t._v("当界面需要重绘或者由于某种操作引发回流时，将执行该线程。")]),t._v(" "),a("li",[t._v("该线程与 "),a("code",[t._v("JS")]),t._v(" 引擎线程互斥，当执行 "),a("code",[t._v("JS")]),t._v(" 引擎线程时，"),a("code",[t._v("GUI")]),t._v(" 渲染会被挂起，当任务队列空闲时，主线程才会去执行 "),a("code",[t._v("GUI")]),t._v(" 渲染。")])]),t._v(" "),a("h4",{attrs:{id:"javascript-引擎线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-引擎线程"}},[t._v("#")]),t._v(" JavaScript 引擎线程")]),t._v(" "),a("ul",[a("li",[t._v("该线程当然是主要负责处理 "),a("code",[t._v("JavaScript")]),t._v(" 脚本，执行代码。")]),t._v(" "),a("li",[t._v("也是主要负责执行准备好待执行的事件，即定时器计数结束，或者异步请求成功并正确返回时，将依次进入任务队列，等待 "),a("code",[t._v("JS")]),t._v(" 引擎线程的执行。")]),t._v(" "),a("li",[t._v("当然，该线程与 "),a("code",[t._v("GUI")]),t._v(" 渲染线程互斥，当 "),a("code",[t._v("JS")]),t._v(" 引擎线程执行 "),a("code",[t._v("JavaScript")]),t._v(" 脚本时间过长，将导致页面渲染的阻塞。")])]),t._v(" "),a("h4",{attrs:{id:"定时触发器线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时触发器线程"}},[t._v("#")]),t._v(" 定时触发器线程")]),t._v(" "),a("ul",[a("li",[t._v("负责执行异步定时器一类的函数的线程，如："),a("code",[t._v("setTimeout")]),t._v("，"),a("code",[t._v("setInterval")]),t._v("。")]),t._v(" "),a("li",[t._v("主线程依次执行代码时，遇到定时器，会将定时器交给该线程处理，当计数完毕后，事件触发线程会将计数完毕后的事件加入到任务队列的尾部，等待 "),a("code",[t._v("JS")]),t._v(" 引擎线程执行。")])]),t._v(" "),a("h4",{attrs:{id:"事件触发线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件触发线程"}},[t._v("#")]),t._v(" 事件触发线程")]),t._v(" "),a("ul",[a("li",[t._v("主要负责将准备好的事件交给 "),a("code",[t._v("JS")]),t._v(" 引擎线程执行。 比如 "),a("code",[t._v("setTimeout")]),t._v(" 定时器计数结束， "),a("code",[t._v("ajax")]),t._v(" 等异步请求成功并触发回调函数，或者用户触发点击事件时，该线程会将整装待发的事件依次加入到任务队列的队尾，等待 JS 引擎线程的执行。")])]),t._v(" "),a("h4",{attrs:{id:"异步-http-请求线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步-http-请求线程"}},[t._v("#")]),t._v(" 异步 http 请求线程")]),t._v(" "),a("ul",[a("li",[t._v("负责执行异步请求一类的函数的线程，如： "),a("code",[t._v("Promise")]),t._v("，"),a("code",[t._v("axios")]),t._v("，"),a("code",[t._v("ajax")]),t._v(" 等。")]),t._v(" "),a("li",[t._v("主线程依次执行代码时，遇到异步请求，会将函数交给该线程处理，当监听到状态码变更，如果有回调函数，事件触发线程会将回调函数加入到任务队列的尾部，等待 "),a("code",[t._v("JS")]),t._v(" 引擎线程执行。")])]),t._v(" "),a("h3",{attrs:{id:"浏览器中的-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的-event-loop"}},[t._v("#")]),t._v(" 浏览器中的 Event Loop")]),t._v(" "),a("h4",{attrs:{id:"micro-task-与-macro-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#micro-task-与-macro-task"}},[t._v("#")]),t._v(" Micro-Task 与 Macro-Task")]),t._v(" "),a("p",[t._v("浏览器端事件循环中的异步队列有两种："),a("code",[t._v("macro")]),t._v("（宏任务）队列和 "),a("code",[t._v("micro")]),t._v("（微任务）队列。宏任务队列可以有多个，微任务队列只有一个。")]),t._v(" "),a("ul",[a("li",[t._v("常见的 "),a("code",[t._v("macro-task")]),t._v(" 比如："),a("code",[t._v("setTimeout")]),t._v("、"),a("code",[t._v("setInterval")]),t._v("、"),a("code",[t._v("script")]),t._v("（整体代码）、 "),a("code",[t._v("I/O")]),t._v(" 操作、"),a("code",[t._v("UI")]),t._v(" 渲染等。")]),t._v(" "),a("li",[t._v("常见的 "),a("code",[t._v("micro-task")]),t._v(" 比如: "),a("code",[t._v("new Promise().then(回调)")]),t._v("、"),a("code",[t._v("MutationObserver")]),t._v(" ("),a("code",[t._v("html5")]),t._v(" 新特性) 等。")])]),t._v(" "),a("h4",{attrs:{id:"event-loop-过程解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-过程解析"}},[t._v("#")]),t._v(" Event Loop 过程解析")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/realwds/cdn@master/blog/event-loop.dbd8675e.60eah776hfo0.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("一开始执行栈空,我们可以把执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则。"),a("code",[t._v("micro")]),t._v(" 队列空，"),a("code",[t._v("macro")]),t._v(" 队列里有且只有一个 "),a("code",[t._v("script")]),t._v(" 脚本（整体代码）。")]),t._v(" "),a("li",[t._v("全局上下文（script 标签）被推入执行栈，同步代码执行。在执行的过程中，会判断是同步任务还是异步任务，通过对一些接口的调用，可以产生新的 "),a("code",[t._v("macro-task")]),t._v(" 与 "),a("code",[t._v("micro-task")]),t._v("，它们会分别被推入各自的任务队列里。同步代码执行完了，"),a("code",[t._v("script")]),t._v(" 脚本会被移出 "),a("code",[t._v("macro")]),t._v(" 队列，这个过程本质上是队列的 "),a("code",[t._v("macro-task")]),t._v(" 的执行和出队的过程。")]),t._v(" "),a("li",[t._v("上一步我们出队的是一个 "),a("code",[t._v("macro-task")]),t._v("，这一步我们处理的是 "),a("code",[t._v("micro-task")]),t._v("。但需要注意的是：当 "),a("code",[t._v("macro-task")]),t._v(" 出队时，任务是一个一个执行的；而 "),a("code",[t._v("micro-task")]),t._v(" 出队时，任务是一队一队执行的。因此，我们处理 "),a("code",[t._v("micro")]),t._v(" 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。")]),t._v(" "),a("li",[t._v("执行渲染操作，更新界面")]),t._v(" "),a("li",[t._v("检查是否存在 "),a("code",[t._v("Web worker")]),t._v(" 任务，如果有，则对其进行处理")]),t._v(" "),a("li",[t._v("上述过程循环往复，直到两个队列都清空")])]),t._v(" "),a("p",[t._v("我们总结一下，每一次循环都是一个这样的过程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/realwds/cdn@master/blog/micro-task.a8ead4cc.a738cfnnobk.jpg",alt:""}})]),t._v(" "),a("p",[t._v("当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Promise1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setTimeout2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setTimeout1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Promise2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("最后输出结果是 "),a("code",[t._v("Promise1")]),t._v("，"),a("code",[t._v("setTimeout1")]),t._v("，"),a("code",[t._v("Promise2")]),t._v("，"),a("code",[t._v("setTimeout2")])]),t._v(" "),a("ul",[a("li",[t._v("一开始执行栈的同步任务（这属于宏任务）执行完毕，会去查看是否有微任务队列，上题中存在(有且只有一个)，然后执行微任务队列中的所有任务输出 "),a("code",[t._v("Promise1")]),t._v("，同时会生成一个宏任务 "),a("code",[t._v("setTimeout2")]),t._v("；")]),t._v(" "),a("li",[t._v("然后去查看宏任务队列，宏任务 "),a("code",[t._v("setTimeout1")]),t._v(" 在 "),a("code",[t._v("setTimeout2")]),t._v(" 之前，先执行宏任务 "),a("code",[t._v("setTimeout1")]),t._v("，输出 "),a("code",[t._v("setTimeout1")]),t._v("；")]),t._v(" "),a("li",[t._v("在执行宏任务 "),a("code",[t._v("setTimeout1")]),t._v(" 时会生成微任务 "),a("code",[t._v("Promise2")]),t._v("，放入微任务队列中，接着先去清空微任务队列中的所有任务，输出 "),a("code",[t._v("Promise2")]),t._v("；")]),t._v(" "),a("li",[t._v("清空完微任务队列中的所有任务后，就又会去宏任务队列取一个，这回执行的是 "),a("code",[t._v("setTimeout2")]),t._v("。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);